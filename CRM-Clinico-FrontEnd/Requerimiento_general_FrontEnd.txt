# Sistema CRM Odontol√≥gico Fullstack (React + TypeScript + Node.js)

## üìÇ Estructura General
```
dental-crm/
‚îú‚îÄ backend/                 # API Node.js + MySQL
‚îú‚îÄ frontend/                # Aplicaci√≥n React + TypeScript
‚îú‚îÄ docker-compose.yml       # Configuraci√≥n Docker
‚îî‚îÄ .github/workflows/       # CI/CD
```

## ‚öôÔ∏è Backend (Node.js + TypeScript)

### Tecnolog√≠as Principales
- Express.js + TypeORM + MySQL
- JWT + Bcrypt (Autenticaci√≥n) Ya est√° en backend
- Zod (Validaci√≥n)
- Swagger (Documentaci√≥n)
- Docker + PostgreSQL (Alternativa)

### Modelos Esenciales
```typescript
// Ejemplo en TypeORM
@Entity()
export class Appointment extends BaseEntity {
  @PrimaryGeneratedColumn()
  id: number;

  @ManyToOne(() => User, user => user.patientAppointments)
  patient: User;

  @ManyToOne(() => User, user => user.dentistAppointments)
  dentist: User;

  @Column({ type: 'datetime' })
  datetime: Date;

  @Column({
    type: 'enum',
    enum: AppointmentStatus,
    default: AppointmentStatus.PENDING
  })
  status: AppointmentStatus;
}
```

### Endpoints Cr√≠ticos
| M√©todo | Ruta | Funci√≥n |
|--------|------|---------|
| POST | `/api/auth/login` | Login con JWT y roles |
| POST | `/api/appointments` | Crear cita con validaci√≥n |
| GET | `/api/dentists/:id/calendar` | Obtener disponibilidad en tiempo real |
| PATCH | `/api/patients/:id/medical` | Actualizar historial m√©dico |

### Caracter√≠sticas Clave
- Sistema de citas con conflict checking
- Notificaciones autom√°ticas (email/SMS)
- Dashboard administrativo con m√©tricas
- Subida segura de archivos m√©dicos
- API Rate Limiting (100 requests/15min)

## üñ•Ô∏è Frontend (React + TypeScript)

### Tecnolog√≠as Principales
- React 18 + Vite + TypeScript
- Redux Toolkit (Gesti√≥n de estado)
- Material-UI v5 + Emotion (Estilos)
- React Hook Form + Yup (Formularios)
- Axios (Conexi√≥n API)

### Componentes Clave
```tsx
// Ejemplo de componente de calendario
const DentalCalendar: React.FC<CalendarProps> = ({ events }) => {
  const { currentUser } = useAuth();

  return (
    <FullCalendar
      plugins={[dayGridPlugin, interactionPlugin]}
      editable={currentUser?.role === 'admin'}
      events={events}
      eventDrop={handleEventDrop} // ‚úÖ Conexi√≥n con API
    />
  );
};
```

### Vistas Principales

#### Dashboard
- Widgets interactivos (citas del d√≠a, ingresos)
- Acceso r√°pido a funcionalidades clave

#### Gesti√≥n de Citas
- Calendario interactivo con drag & drop
- Sistema de recordatorios visuales
- B√∫squeda inteligente por paciente/fecha

#### Perfil de Paciente
- Historial m√©dico digital (PDF/im√°genes)
- Timeline de tratamientos
- Formulario seguro de actualizaci√≥n de datos

#### Panel Dentista
- Vista de agenda personalizada
- Gesti√≥n de tareas priorizadas
- Chat interno con pacientes

### Integraci√≥n con Backend
```typescript
// Ejemplo de servicio API
export const AppointmentService = {
  createAppointment: async (data: AppointmentDTO): Promise<Appointment> => {
    const response = await axios.post<Appointment>(
      '/api/appointments',
      data,
      {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      }
    );
    return response.data;
  },
  
  checkDentistAvailability: async (dentistId: number, date: string) => {
    return axios.get<AvailabilityResponse>(
      `/api/dentists/${dentistId}/availability?date=${date}`
    );
  }
};
```

## üöÄ Despliegue y DevOps

### Dockerfile
```dockerfile
# Backend Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
CMD ["npm", "run", "start:prod"]

# Frontend Dockerfile
FROM nginx:alpine
COPY dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
```

### Variables de Entorno
```ini
# .env.example
VITE_API_URL=http://localhost:3000/api
VITE_GOOGLE_MAPS_KEY=your_key
VITE_SENTRY_DSN=your_dsn
```

## ‚úÖ Requisitos T√©cnicos Completos

### Seguridad
- Validaci√≥n JWT en todas las rutas
- CORS configurado estrictamente
- Sanitizaci√≥n de inputs (XSS protection)

### Testing
- Backend: Jest + Supertest (90% coverage)
- Frontend: React Testing Library + Cypress

### Performance
- Caching de consultas frecuentes (Redis)
- Lazy loading de rutas en frontend
- Optimizaci√≥n de im√°genes (WebP)

### Extras
- Dark Mode persistente
- Internacionalizaci√≥n (i18n) ES/EN
- WebSockets para notificaciones en tiempo real